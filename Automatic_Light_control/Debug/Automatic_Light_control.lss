
Automatic_Light_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000027a  0000030e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800078  00800078  00000326  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000326  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008af  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000067b  00000000  00000000  00000c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003dc  00000000  00000000  00001316  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  000016f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003aa  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e8  00000000  00000000  00001b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001d32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e7       	ldi	r30, 0x7A	; 122
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  8a:	0c 94 3b 01 	jmp	0x276	; 0x276 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <delay>:

int count = 0;
char no[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};

void delay(int d) {
	while (d--) {
  92:	07 c0       	rjmp	.+14     	; 0xa2 <delay+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	87 eb       	ldi	r24, 0xB7	; 183
  96:	9b e0       	ldi	r25, 0x0B	; 11
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <delay+0x6>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <delay+0xc>
  9e:	00 00       	nop
  a0:	c9 01       	movw	r24, r18
  a2:	9c 01       	movw	r18, r24
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	31 09       	sbc	r19, r1
  a8:	89 2b       	or	r24, r25
  aa:	a1 f7       	brne	.-24     	; 0x94 <delay+0x2>
		_delay_ms(1);
	}
}
  ac:	08 95       	ret

000000ae <cmd>:

void cmd(char c) {
	lcd = c;
  ae:	85 bb       	out	0x15, r24	; 21
	PORTD &= ~(1 << rs);
  b0:	82 b3       	in	r24, 0x12	; 18
  b2:	8b 7f       	andi	r24, 0xFB	; 251
  b4:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << e);
  b6:	82 b3       	in	r24, 0x12	; 18
  b8:	80 61       	ori	r24, 0x10	; 16
  ba:	82 bb       	out	0x12, r24	; 18
	delay(5);
  bc:	85 e0       	ldi	r24, 0x05	; 5
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 49 00 	call	0x92	; 0x92 <delay>
	PORTD &= ~(1 << e);
  c4:	82 b3       	in	r24, 0x12	; 18
  c6:	8f 7e       	andi	r24, 0xEF	; 239
  c8:	82 bb       	out	0x12, r24	; 18
  ca:	08 95       	ret

000000cc <display>:
}

void display(char c) {
	lcd = c;
  cc:	85 bb       	out	0x15, r24	; 21
	PORTD |= (1 << rs);
  ce:	82 b3       	in	r24, 0x12	; 18
  d0:	84 60       	ori	r24, 0x04	; 4
  d2:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << e);
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	80 61       	ori	r24, 0x10	; 16
  d8:	82 bb       	out	0x12, r24	; 18
	delay(5);
  da:	85 e0       	ldi	r24, 0x05	; 5
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 49 00 	call	0x92	; 0x92 <delay>
	PORTD &= ~(1 << e);
  e2:	82 b3       	in	r24, 0x12	; 18
  e4:	8f 7e       	andi	r24, 0xEF	; 239
  e6:	82 bb       	out	0x12, r24	; 18
  e8:	08 95       	ret

000000ea <string>:
}

void string(char *p) {
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	ec 01       	movw	r28, r24
	while (*p) {
  f0:	03 c0       	rjmp	.+6      	; 0xf8 <string+0xe>
		display(*p++);
  f2:	21 96       	adiw	r28, 0x01	; 1
  f4:	0e 94 66 00 	call	0xcc	; 0xcc <display>
	delay(5);
	PORTD &= ~(1 << e);
}

void string(char *p) {
	while (*p) {
  f8:	88 81       	ld	r24, Y
  fa:	81 11       	cpse	r24, r1
  fc:	fa cf       	rjmp	.-12     	; 0xf2 <string+0x8>
		display(*p++);
	}
}
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <view>:

void view(int n) {
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	ec 01       	movw	r28, r24
	cmd(0xc0);
 10a:	80 ec       	ldi	r24, 0xC0	; 192
 10c:	0e 94 57 00 	call	0xae	; 0xae <cmd>
	display(no[(n / 10) % 10]);
 110:	2a e0       	ldi	r18, 0x0A	; 10
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	ce 01       	movw	r24, r28
 116:	b9 01       	movw	r22, r18
 118:	0e 94 13 01 	call	0x226	; 0x226 <__divmodhi4>
 11c:	ec 01       	movw	r28, r24
 11e:	cb 01       	movw	r24, r22
 120:	b9 01       	movw	r22, r18
 122:	0e 94 13 01 	call	0x226	; 0x226 <__divmodhi4>
 126:	fc 01       	movw	r30, r24
 128:	e0 5a       	subi	r30, 0xA0	; 160
 12a:	ff 4f       	sbci	r31, 0xFF	; 255
 12c:	80 81       	ld	r24, Z
 12e:	0e 94 66 00 	call	0xcc	; 0xcc <display>
	display(no[n % 10]);
 132:	c0 5a       	subi	r28, 0xA0	; 160
 134:	df 4f       	sbci	r29, 0xFF	; 255
 136:	88 81       	ld	r24, Y
 138:	0e 94 66 00 	call	0xcc	; 0xcc <display>
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <init>:

void init(void) {
	cmd(0x38);
 142:	88 e3       	ldi	r24, 0x38	; 56
 144:	0e 94 57 00 	call	0xae	; 0xae <cmd>
	cmd(0x0c);
 148:	8c e0       	ldi	r24, 0x0C	; 12
 14a:	0e 94 57 00 	call	0xae	; 0xae <cmd>
	cmd(0x01);
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	0e 94 57 00 	call	0xae	; 0xae <cmd>
	cmd(0x80);
 154:	80 e8       	ldi	r24, 0x80	; 128
 156:	0e 94 57 00 	call	0xae	; 0xae <cmd>
 15a:	08 95       	ret

0000015c <controlRelay>:
}

void controlRelay(int state) {
	if (state) {
 15c:	89 2b       	or	r24, r25
 15e:	21 f0       	breq	.+8      	; 0x168 <controlRelay+0xc>
		PORTB |= (1 << relay); // Turn on relay
 160:	88 b3       	in	r24, 0x18	; 24
 162:	81 60       	ori	r24, 0x01	; 1
 164:	88 bb       	out	0x18, r24	; 24
 166:	08 95       	ret
		} else {
		PORTB &= ~(1 << relay); // Turn off relay
 168:	88 b3       	in	r24, 0x18	; 24
 16a:	8e 7f       	andi	r24, 0xFE	; 254
 16c:	88 bb       	out	0x18, r24	; 24
 16e:	08 95       	ret

00000170 <main>:
	}
}

int main() {
	DDRD = 0xFF; // Port D as output
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF; // Port C as output
 174:	84 bb       	out	0x14, r24	; 20
	DDRB = (1 << relay); // Relay pin as output
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	87 bb       	out	0x17, r24	; 23
	DDRA &= ~((1 << s1) | (1 << s2)); // Set s1 and s2 pins as inputs (IR sensors)
 17a:	8a b3       	in	r24, 0x1a	; 26
 17c:	8c 7f       	andi	r24, 0xFC	; 252
 17e:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << s1) | (1 << s2); // Enable internal pull-up resistors for s1 and s2
 180:	8b b3       	in	r24, 0x1b	; 27
 182:	83 60       	ori	r24, 0x03	; 3
 184:	8b bb       	out	0x1b, r24	; 27

	init();
 186:	0e 94 a1 00 	call	0x142	; 0x142 <init>
	string("No of Person");
 18a:	8a e6       	ldi	r24, 0x6A	; 106
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 75 00 	call	0xea	; 0xea <string>
	cmd(0xc0);
 192:	80 ec       	ldi	r24, 0xC0	; 192
 194:	0e 94 57 00 	call	0xae	; 0xae <cmd>
	view(count);
 198:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 19c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
 1a0:	0e 94 82 00 	call	0x104	; 0x104 <view>

	while (1) {
		if (PINA & (1 << s1)) {
 1a4:	c8 9b       	sbis	0x19, 0	; 25
 1a6:	17 c0       	rjmp	.+46     	; 0x1d6 <main+0x66>
			while (!(PINA & (1 << s2)));
 1a8:	c9 9b       	sbis	0x19, 1	; 25
 1aa:	fe cf       	rjmp	.-4      	; 0x1a8 <main+0x38>
			if (count != 99)
 1ac:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 1b0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
 1b4:	83 36       	cpi	r24, 0x63	; 99
 1b6:	91 05       	cpc	r25, r1
 1b8:	29 f0       	breq	.+10     	; 0x1c4 <main+0x54>
			count = count + 1;
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
 1c0:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
			while (PINA & (1 << s2));
 1c4:	c9 99       	sbic	0x19, 1	; 25
 1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <main+0x54>
			view(count);
 1c8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 1cc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
 1d0:	0e 94 82 00 	call	0x104	; 0x104 <view>
 1d4:	17 c0       	rjmp	.+46     	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
			} else if (PINA & (1 << s2)) {
 1d6:	c9 9b       	sbis	0x19, 1	; 25
 1d8:	15 c0       	rjmp	.+42     	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
			while (!(PINA & (1 << s1)));
 1da:	c8 9b       	sbis	0x19, 0	; 25
 1dc:	fe cf       	rjmp	.-4      	; 0x1da <main+0x6a>
			if (count != 0)
 1de:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 1e2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
 1e6:	00 97       	sbiw	r24, 0x00	; 0
 1e8:	29 f0       	breq	.+10     	; 0x1f4 <main+0x84>
			count = count - 1;
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
 1f0:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
			while (PINA & (1 << s1));
 1f4:	c8 99       	sbic	0x19, 0	; 25
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <main+0x84>
			view(count);
 1f8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 1fc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
 200:	0e 94 82 00 	call	0x104	; 0x104 <view>
		}
		
		// Turn on relay when count is greater than 0, otherwise turn it off
		if (count > 0) {
 204:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 208:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
 20c:	18 16       	cp	r1, r24
 20e:	19 06       	cpc	r1, r25
 210:	2c f4       	brge	.+10     	; 0x21c <__EEPROM_REGION_LENGTH__+0x1c>
			controlRelay(1); // Turn on relay when count is greater than 0
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 ae 00 	call	0x15c	; 0x15c <controlRelay>
 21a:	c4 cf       	rjmp	.-120    	; 0x1a4 <main+0x34>
			} else {
			controlRelay(0); // Turn off relay when count is 0
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 ae 00 	call	0x15c	; 0x15c <controlRelay>
 224:	bf cf       	rjmp	.-130    	; 0x1a4 <main+0x34>

00000226 <__divmodhi4>:
 226:	97 fb       	bst	r25, 7
 228:	07 2e       	mov	r0, r23
 22a:	16 f4       	brtc	.+4      	; 0x230 <__divmodhi4+0xa>
 22c:	00 94       	com	r0
 22e:	07 d0       	rcall	.+14     	; 0x23e <__divmodhi4_neg1>
 230:	77 fd       	sbrc	r23, 7
 232:	09 d0       	rcall	.+18     	; 0x246 <__divmodhi4_neg2>
 234:	0e 94 27 01 	call	0x24e	; 0x24e <__udivmodhi4>
 238:	07 fc       	sbrc	r0, 7
 23a:	05 d0       	rcall	.+10     	; 0x246 <__divmodhi4_neg2>
 23c:	3e f4       	brtc	.+14     	; 0x24c <__divmodhi4_exit>

0000023e <__divmodhi4_neg1>:
 23e:	90 95       	com	r25
 240:	81 95       	neg	r24
 242:	9f 4f       	sbci	r25, 0xFF	; 255
 244:	08 95       	ret

00000246 <__divmodhi4_neg2>:
 246:	70 95       	com	r23
 248:	61 95       	neg	r22
 24a:	7f 4f       	sbci	r23, 0xFF	; 255

0000024c <__divmodhi4_exit>:
 24c:	08 95       	ret

0000024e <__udivmodhi4>:
 24e:	aa 1b       	sub	r26, r26
 250:	bb 1b       	sub	r27, r27
 252:	51 e1       	ldi	r21, 0x11	; 17
 254:	07 c0       	rjmp	.+14     	; 0x264 <__udivmodhi4_ep>

00000256 <__udivmodhi4_loop>:
 256:	aa 1f       	adc	r26, r26
 258:	bb 1f       	adc	r27, r27
 25a:	a6 17       	cp	r26, r22
 25c:	b7 07       	cpc	r27, r23
 25e:	10 f0       	brcs	.+4      	; 0x264 <__udivmodhi4_ep>
 260:	a6 1b       	sub	r26, r22
 262:	b7 0b       	sbc	r27, r23

00000264 <__udivmodhi4_ep>:
 264:	88 1f       	adc	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	5a 95       	dec	r21
 26a:	a9 f7       	brne	.-22     	; 0x256 <__udivmodhi4_loop>
 26c:	80 95       	com	r24
 26e:	90 95       	com	r25
 270:	bc 01       	movw	r22, r24
 272:	cd 01       	movw	r24, r26
 274:	08 95       	ret

00000276 <_exit>:
 276:	f8 94       	cli

00000278 <__stop_program>:
 278:	ff cf       	rjmp	.-2      	; 0x278 <__stop_program>
